# -*- coding: utf-8 -*-
#
# script made by Z
#

import sys

def ecrire(f,p): 
    f.write ("// =============================//\n")
    f.write ("// script generated by zeus \n")
    f.write ("// a Z tool\n")
    f.write ("// z_arma@hotmail.com\n")
    f.write ("// =============================//\n")
    f.write ("\n")
#    print p
    for i in p:
        f.write(i + "\n")
                
def formatter(lignes):
    liste=[]
    niveau=0 # gestion des niveaux d'accolades 
    for lig in lignes: 
        ligne = lig.strip()  
        mots = ligne.split('=') ## Séparation variable / valeur    
        if len(mots)==2:
            liste.append(mots)
        else:
            mots = ligne.split(" ")
#            print mots
            if mots[0] == "class":
                liste.append(mots)
            if mots[0] == "{":
                niveau += 1
                liste.append([mots[0],niveau])
            if mots[0] == "};":            
                liste.append([mots[0],niveau])
                niveau -= 1
    return liste 

           
def selection(p):
    result = False 
    if p:
        if p in ("Vehicles"):
            result=True
        if p in ("Waypoints"):
            result=True
        if p in ("Sensors"):
            result=True            
    return result


def scriptsqf(p):
#====== intitialisation des variables ==========================================    
    markers , placement , special, skill, armor = "[]","0","NONE",0,1 
    position=[]
    speed=formation=type=behaviour=combat=description=expActiv=expDesactiv=""
    combatMode=rectangular=interruptable=""
    timeoutMin=timeoutMid=timeoutMax=completitionRadius=0
    a=b=50
    repeating=0
    age=angle=""
    expCond='"This"'
    id="0"
    classe=""
    objetOk=False
#===============================================================================

    n=0
    lescript = []
    finobjet=False
    niveaus=niveauc=0 # niveau de l'objet selectionné et niveau courrant
#    print "scriptsqf(p) \n" + str(p)
    for i in p:
        print i
        if i[0] == "{": niveauc = i[1]
        
        if selection(str(i[-1])):
            classe = str(i[-1])
            niveaus = niveauc + 1 # stockage du niveau de l'accolade suivante
           
        chaine = "vehicle"
        if chaine == i[0]:
            letype = i[1].rstrip(";")
            print letype
        chaine = "azimut"
        if chaine == i[0]:
            azimut = i[1].rstrip(";")
        chaine = "position[]"
        if chaine == i[0]:
            position = i[1].rstrip(";").lstrip("{;").rstrip("};") + ",0"
            liste = position.split(",")
            liste.pop(1)
            position = str(liste).lstrip("[").rstrip("]").replace("'", "")
        chaine = "skill"
        if chaine == i[0]:
            skill = i[1]
        chaine = "health"
        if chaine == i[0]:
            armor = i[1]
        chaine = "placement"
        if chaine == i[0]:
            placement = i[1].rstrip(";")           
        chaine = "completitionRadius"
        if chaine == i[0]:
            completitionRadius = i[1]
        chaine = "type"
        if chaine == i[0]:
            type = i[1]
        chaine = "combatMode"
        if chaine == i[0]:
            combatMode = i[1]
        chaine = "formation"
        if chaine == i[0]:
            formation = i[1]
        chaine = "speed"
        if chaine == i[0]:
            speed = i[1]
        chaine = "combat"
        if chaine == i[0]:
            combat = i[1]
        chaine ="description"
        if chaine == i[0]:
	       description = i[1]
        chaine ="expActiv"
        if chaine == i[0]:
	       expActiv = i[1].rstrip(";")
        chaine ="timeoutMin"
        if chaine == i[0]:
	       timeoutMin = i[1].rstrip(";")
        chaine ="timeoutMid"
        if chaine == i[0]:
           timeoutMid = i[1].rstrip(";")
        chaine ="timeoutMax"
        if chaine == i[0]:
           timeoutMax = i[1].rstrip(";")                   
        chaine = "a"
        if chaine == i[0]:
            a = i[1]
        chaine = "b"
        if chaine == i[0]:
            b = i[1]
        chaine ="angle"
        if chaine == i[0]:
	       angle = i[1].rstrip(";")
        chaine ="rectangular"
        if chaine == i[0]:
	       rectangular = i[1].rstrip(";")        
        chaine ="activationBy"
        if chaine == i[0]:
	       activationBy = i[1].rstrip(";")
        chaine ="activationType"
        if chaine == i[0]:
	       activationType = i[1].rstrip(";")
        chaine ="repeating"
        if chaine == i[0]:
	       repeating = i[1].rstrip(";")
        chaine ="interruptable"
        if chaine == i[0]:
	       interruptable = i[1].rstrip(";")
        chaine ="age"
        if age == i[0]:
	       v = i[1]
        chaine ="text"
        if chaine == i[0]:
	       text = i[1]
        chaine ="name"
        if chaine == i[0]:
	       name = i[1]
        chaine ="expCond"
        if chaine == i[0]:
           expActiv = i[1].rstrip(";")           
        chaine ="expActiv"
        if chaine == i[0]:
	       expActiv = i[1].rstrip(";")
        chaine ="expDesactiv"
        if chaine == i[0]:
	       expDesactiv = i[1].rstrip(";")
        chaine ="track"
        if chaine == i[0]:
	       track = i[1]
           
        chaine ="id"
        if chaine == i[0]:
           id = i[1]
        
        if position:
            objetOk=True
           
        chaine ="class"
        if chaine == i[0]:
            if "Item" in i[1]:
                print "Item ----",i[1]
                if objetOk:
                    finobjet=True
        chaine = "};"    # fin de classe
        print "classe,id", classe, id,niveauc,niveaus
        if chaine in i > -1:
            niveauc = i[1]
            if niveauc == niveaus:
                finobjet=True
            if niveauc < niveaus:
                niveaus=0 # nous sommes à la fin d'une classe selectionnée
        
        if finobjet and objetOk:
            print "classe,id", classe, id
            n += 1
            lescript.append("")
            lescript.append("// id " + id)
            if classe == "Vehicles":
                
                result = "_pos = [" + position + "];"
                lescript.append(result)
                
                result = "_veh" + str(n) + " = createVehicle [" + letype + ", _pos," + markers + "," + placement + ",\"" + special +"\"];"
                lescript.append(result)
                
                if azimut:
                    result = "_veh" + str(n) + " setDir " + azimut + ";"
                    lescript.append(result)
                    
                result = "_veh" + str(n) + " setPos _pos;"
                lescript.append(result)
                                
                result = "_veh" + str(n) + " setSkill " + str(skill) 
                lescript.append(result)
                
                if armor != 1:
                    result = "_veh" + str(n) + " setVehicleArmor " + str(armor) 
                    lescript.append(result)
                    
                lescript.append("")              
                markers , placement , special, skill, armor = "[]","0","NONE",0,1
                
                
            if classe == "Waypoints":
                
                if position:
                    result = "_wp" + str(n) + " = _grp addWaypoint [" + position + "," + str(placement) + "];"
                    lescript.append(result)
                    
                if formation:
                    result = "_wp" + str(n) + " setWaypointFormation " + formation;
                    lescript.append(result)
                    
                if type:
                    result = "_wp" + str(n) + " setwaypointtype " + type
                    lescript.append(result)
                    
                if speed:
                    result = "_wp" + str(n) + " setWaypointSpeed " + speed
                    lescript.append(result)
                    
                if combat:
                    result = "_wp" + str(n) + " setWaypointBehaviour " + combat
                    lescript.append(result)
                    
                if combatMode:
                    result = "_wp" + str(n) + " setCombatMode " + combatMode
                    lescript.append(result)
                
                if completitionRadius:
                    result = "_wp" + str(n) + " setWaypointCompletionRadius " + completitionRadius
                    lescript.append(result)

                if description:
                    result = "_wp" + str(n) + " setWaypointDescription " + description
                    lescript.append(result)                    
                
                if expActiv:
                    result = "_wp" + str(n) + " setWaypointStatements [condition, " + expActiv + "];" 
                    lescript.append(result)    
            
                if timeoutMin or timeoutMid or timeoutMax:
                    result = "_wp" + str(n) + " setWaypointTimeout ["+ str(timeoutMin) +","+ str(timeoutMid) +","+ str(timeoutMax) + "];" 
                    lescript.append(result)
                    
            if classe == "Sensors":
                
                result = "_pos = [" + position + "];"
                lescript.append(result)

                result = "_t" + str(n) + " = createTrigger[\"EmptyDetector\",_pos];"
                lescript.append(result)
                
                if repeating == "1": tf = "true" 
                else: tf="False"
#                if activationType=="":activationType='"PRESENT"'
#                result = "_t" + str(n) + " setTriggerActivation [" + activationBy + ", " + activationType + ", " + tf + "];"
#                lescript.append(result)
                
                if rectangular: tf="True"
                else: tf="False"
                result = "_t" + str(n) + " setTriggerArea [" + str(a) + "," + str(b) + "," + angle + "," + tf + "];" 
                lescript.append(result)
                
                if expActiv:
                    result = "_t" + str(n) + " setTriggerStatements [" + expCond +","+  expActiv +","+ expDesactiv + "];" 
                    lescript.append(result)
                    
                print "time ", timeoutMin, timeoutMid, timeoutMax
                if interruptable == "1": tf = "true" 
                else: tf="False"
                if timeoutMin or timeoutMid or timeoutMax:
                    result = "_t" + str(n) + " setTriggerTimeout ["+ str(timeoutMin) +","+ str(timeoutMid) +","+ str(timeoutMax) + "," +tf + "];" 
                    lescript.append(result)                
                
                if text:
                    result = "_t" + str(n) + " setTriggerText " + text  
                    lescript.append(result)
            objetOk=False           
            finobjet=False
#====== intitialisation des variables ==========================================    
            markers , placement , special, skill, armor = "[]","0","NONE",0,1 
            position=[]
            speed=formation=type=behaviour=combat=description=expActiv=expDesactiv=""
            combatMode=rectangular=interruptable=""
            timeoutMin=timeoutMid=timeoutMax=completitionRadius=0
            a=b=50
            repeating=0
            age=angle=""
            expCond='"This"'          
#===============================================================================            

            
    return lescript

def main():
    args = sys.argv[1:]
    print "DEBUT", args     
    if "mission.sqm" in args[0]: 
        fmission = open (str(args[0]),"r")
        chaine = str(args[0].rstrip("mission.sqm")) + "script.sqf"    
        
        fsortie = open (chaine,"w")
         
        #for i in formatter(fmission.readlines()):
        #    print i
        liste1 = formatter(fmission.readlines())
        lescript = scriptsqf(liste1)
        #for i in scriptsqf(liste1):
        #    print i
        
        ecrire(fsortie,lescript)
        
        fmission.close
        fsortie.close
        print "FIN"

if __name__ == '__main__':
    main()


